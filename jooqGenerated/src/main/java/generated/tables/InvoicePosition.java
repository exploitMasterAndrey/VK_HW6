/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Keys;
import generated.Public;
import generated.tables.records.InvoicePositionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InvoicePosition extends TableImpl<InvoicePositionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.invoice_position</code>
     */
    public static final InvoicePosition INVOICE_POSITION = new InvoicePosition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvoicePositionRecord> getRecordType() {
        return InvoicePositionRecord.class;
    }

    /**
     * The column <code>public.invoice_position.price</code>.
     */
    public final TableField<InvoicePositionRecord, Integer> PRICE = createField(DSL.name("price"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.invoice_position.product_inner_code</code>.
     */
    public final TableField<InvoicePositionRecord, Integer> PRODUCT_INNER_CODE = createField(DSL.name("product_inner_code"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.invoice_position.amount</code>.
     */
    public final TableField<InvoicePositionRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.invoice_position.invoice_num</code>.
     */
    public final TableField<InvoicePositionRecord, Integer> INVOICE_NUM = createField(DSL.name("invoice_num"), SQLDataType.INTEGER.nullable(false), this, "");

    private InvoicePosition(Name alias, Table<InvoicePositionRecord> aliased) {
        this(alias, aliased, null);
    }

    private InvoicePosition(Name alias, Table<InvoicePositionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.invoice_position</code> table reference
     */
    public InvoicePosition(String alias) {
        this(DSL.name(alias), INVOICE_POSITION);
    }

    /**
     * Create an aliased <code>public.invoice_position</code> table reference
     */
    public InvoicePosition(Name alias) {
        this(alias, INVOICE_POSITION);
    }

    /**
     * Create a <code>public.invoice_position</code> table reference
     */
    public InvoicePosition() {
        this(DSL.name("invoice_position"), null);
    }

    public <O extends Record> InvoicePosition(Table<O> child, ForeignKey<O, InvoicePositionRecord> key) {
        super(child, key, INVOICE_POSITION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<InvoicePositionRecord> getPrimaryKey() {
        return Keys.ID;
    }

    @Override
    public List<ForeignKey<InvoicePositionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INVOICE_POSITION__INVOICE_POSITION_PRODUCT_INNER_CODE_FKEY, Keys.INVOICE_POSITION__INVOICE_POSITION_INVOICE_NUM_FKEY);
    }

    private transient Product _product;
    private transient Invoice _invoice;

    public Product product() {
        if (_product == null)
            _product = new Product(this, Keys.INVOICE_POSITION__INVOICE_POSITION_PRODUCT_INNER_CODE_FKEY);

        return _product;
    }

    public Invoice invoice() {
        if (_invoice == null)
            _invoice = new Invoice(this, Keys.INVOICE_POSITION__INVOICE_POSITION_INVOICE_NUM_FKEY);

        return _invoice;
    }

    @Override
    public InvoicePosition as(String alias) {
        return new InvoicePosition(DSL.name(alias), this);
    }

    @Override
    public InvoicePosition as(Name alias) {
        return new InvoicePosition(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InvoicePosition rename(String name) {
        return new InvoicePosition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InvoicePosition rename(Name name) {
        return new InvoicePosition(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
